<body>

  <h1>Ruby | A PROGRAMMER'S BEST FRIEND</h1>
  <section id="center">
    <div id="image">
      <%= image_tag 'ruby.png', :width => 600 %>
    </div>
    <aside>
      <p><h3>À propos de Ruby</h3>
        <br> Indéniablement, Ruby devient de plus en plus populaire. Les « rubyistes » qualifient ce langage d’élégant,
        voire lui prêtent des qualités artistiques ; ils soulignent dans le même temps qu’il est pratique à utiliser
        et facile d’accès. Mais tout ça est très éthéré, qu’en est-il concrètement parlant ?
        <h3>Ruby, une conceptualisation</h3>
        personnelle. Le langage ruby, en terme de syntaxe et de fonctionnalité, a été dès le départ conçu comme un
        ensemble homogène. Son créateur est le programmeur japonais Yukihiro « Matz » Matsumoto. Ce dernier a rassemblé
        certaines fonctionnalités de ses langages préférés de l’époque (principalement Perl, Smalltalk, Eiffel, Ada
        et Lisp) afin d’imaginer un nouveau langage qui mêlerait astucieusement programmations impérative et fonctionnelle.
        À plusieurs reprises, il a déclaré que son but était « d’essayer de rendre Ruby le plus naturel possible,
        pas nécessairement simple. »

        À ce propos, il a ajouté : Ruby est simple en apparence, mais son architecture
        interne est très complexe — tout comme notre corps peut l’être1. C’est cette approche qui a été maintenue
        depuis lors, pour faire de Ruby un langage robuste, porté par une syntaxe naturelle.
        <h3>La croissance de Ruby</h3>
        Depuis sa publication en 1995, Ruby a progressivement intéressé de plus en plus de programmeurs venant des
        quatre coins du monde. En 2006, Ruby rassemblait une masse critique d’utilisateur et gagnait une réelle reconnaissance.
        Aujourd’hui, des groupes d’utilisateurs existent dans les plus grandes villes du monde, et les (nombreuses)
        conférences à propos de Ruby affichent complet. Ruby-Talk, la toute première liste de diffusion recevant
        les discussions à propos du langage Ruby, atteint aujourd’hui une moyenne de deux cent nouveaux messages
        par jour. L’index TIOBE, qui mesure la croissance des langages informatiques, place Ruby à la dixieme place
        du classement des langages les plus utilisés au monde. Concernant cette évolution, leur prédiction est la
        suivante : « il y a des chances que Ruby entre dans le top 10 dans moins de six mois. » La plus grande part
        de cette accélération semble revenir à la popularité de certains logiciels écrits en Ruby, notamment le framework
        web Ruby on Rails. Par ailleurs, Ruby est totalement libre. Il est non seulement gratuit, mais son utilisation,
        sa copie, sa modification et sa distribution sont également libres.
        <h3>Une complète orientation objet</h3>
        Initialement, Matz a étudié les autres langages afin de définir une syntaxe qui lui serait idéale. Se remémorant cet épisode,
        il nous rapportait : « je voulais un langage de script plus puissant que Perl, et plus orienté objet que
        Python2.” Dans Ruby, le paradigme de base est que tout y est un objet. Chaque entité d’information et de
        code peut recevoir ses propres propriétés et actions. La programmation orientée objet fait référence aux
        propriétés sous le terme de variables d’instance, et aux actions sous le nom de méthodes. L’approche purement
        objet de Ruby est très souvent illustrée par un bout de code montrant l’application d’une action à un nombre.
        5.times { print "Nous *adorons* Ruby -- Même trop !" } Dans beaucoup de langages, les nombres et autres types
        primaires ne sont pas des objets. Ruby suit ici la voie de Smalltalk, en donnant accès aux méthodes et variables
        d’instance à tous les types. Cela facilite l’appropriation de Ruby, puisque les règles s’appliquant aux objets
        usuels s’appliquent en fait à travers tout Ruby. Par ailleurs, la syntaxe est triviale, se rapprochant d’une
        phrase minimaliste en anglais.
        <h3>Un souci de flexibilité</h3>
        Ruby a pour réputation d’être un langage très flexible, autorisant notamment son utilisateur à en modifier les entrailles durant l’exécution. Des parties importantes
        de Ruby peuvent être retirées ou redéfinies à loisir ; des greffes de fonctionnalités sont possibles en cours
        de route. En définitive, Ruby essaye de ne pas contraindre le programmeur, mais de lui fournir un squelette
        robuste autour duquel bâtir des applications. Par exemple, l’opération arithmétique d’addition est réalisée
        par l’opérateur plus (+). Mais si vous préférez utiliser une méthode plus, vous pouvez l’ajouter à la classe
        de base Numeric de Ruby : class Numeric def plus(x) self.+(x) end end y = 5.plus 6 # y vaut maintenant 11
        Tous les opérateurs de Ruby sont des méthodes pensées pour être aussi pratique que faire se peut, syntaxiquement
        parlant. Vous pouvez toutefois les redéfinir à votre convenance.</p>

        <p>Ruby a pour réputation d’être un langage très flexible, autorisant notamment son utilisateur à en modifier les entrailles durant l’exécution. Des parties importantes
          de Ruby peuvent être retirées ou redéfinies à loisir ; des greffes de fonctionnalités sont possibles en cours
          de route. En définitive, Ruby essaye de ne pas contraindre le programmeur, mais de lui fournir un squelette
          robuste autour duquel bâtir des applications. Par exemple, l’opération arithmétique d’addition est réalisée
          par l’opérateur plus (+). Mais si vous préférez utiliser une méthode plus, vous pouvez l’ajouter à la classe
          de base Numeric de Ruby : class Numeric def plus(x) self.+(x) end end y = 5.plus 6 # y vaut maintenant 11
          Tous les opérateurs de Ruby sont des méthodes pensées pour être aussi pratique que faire se peut, syntaxiquement
          parlant. Vous pouvez toutefois les redéfinir à votre convenance.</p>
        </aside>
      </section>

    </body>
